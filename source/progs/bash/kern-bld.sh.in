#! /usr/bin/env bash
##########################################################################
##									##
##	kern-bld.sh is automatically generated,				##
##		please do not modify!					##
##									##
##########################################################################

##########################################################################
##									##
## Script ID: kern-bld.sh						##
## Author: Mark Grant							##
##									##
## Purpose:								##
## Builds the specified kernel in the specified manner.			##
##                                                              	##
## Syntax:      kern-bld.sh [OPTIONS]					##
##			[OPTIONS] are:-					##
##	-h or --help Displays usage information.			##
##	-i or --install Install the built kernel.			##
##	-n or --new Build new kernel from scratch.			##
##	-o or --object-dir 'object-directory' Parallel build base 	##
##		directory for object files.				##
##	-p or --persist Saves command line options for future use.	##
##	-s or --source-dir 'source-directory' Base directory for source.##
##	-u or --update Update the built kernel.				##
##	-V or --version Displays version information.			##
##									##
## Exit Codes:	0 & 64 - 113 as per C/C++ standard			##
##		0 - success						##
##		64 - Invalid arguments					##
##		66 - File access error					##
##		67 - trap received					##
##		77 - Permissions error					##
##									##
##########################################################################

##########################################################################
##									##
## Changelog								##
##									##
## Date		Author	Version	Description				##
##									##
## 06/07/2016	MG	1.0.1	Created.				##
## 08/07/2016	MG	1.0.2	Change command line parameters from	##
##				objectdir & sourcedir to object-dir &	##
##				source-dir.				##
##									##
##########################################################################


####################
## Init variables ##
####################
script_exit_code=0
version="1.0.2"				# set version variable
outputprefix="kern-bld.sh: "
packageversion=@pkgversion@		# Version of the complete package

conffile=".kern-bld.conf"
install=FALSE
new=FALSE
objectdir=""
persist=FALSE
sourcedir=""
update=FALSE


###############
## Functions ##
###############

# Output $1 to stdout or stderr depending on $2
output()
{
	if [ $2 = 0 ]
	then
		echo "$outputprefix$1"
	else
		echo "$outputprefix$1" 1>&2
	fi
}

# Standard function to test command error ($1 is $?) and exit if non-zero
std_cmd_err_handler()
{
	if [ $1 != 0 ]
	then
		script_exit_code=$1
		script_exit
	fi
}

# Standard function to tidy up and return exit code
script_exit()
{
	exit $script_exit_code
}

# Standard trap exit function
trap_exit()
{
script_exit_code=67
output "Script terminating due to trap received. Code: "$script_exit_code 1
script_exit
}

# Setup trap
trap trap_exit SIGHUP SIGINT SIGTERM

# Function to write config file.
write_file()
{
	echo "sourcedir=$sourcedir">>~/.kern-bld.conf
	echo "objectdir=$objectdir">>~/.kern-bld.conf
}

##########
## Main ##
##########
# If config file exists, read it, else, create it.
if [ ! -f ~/$conffile ]
then
	write_file
else
	IFS="="
	exec 3<~/$conffile
	while read -u3 -ra input
	do
		case ${input[0]} in
		sourcedir)
			sourcedir=${input[1]}
			;;
		objectdir)
			objectdir=${input[1]}
			;;
		esac
	done
	exec 3<&-
fi

# Process command line arguments with GNU getopt.
GETOPTTEMP=`getopt -o hino:ps:uV \
	--long help,install,new,object-dir:,persist,source-dir:,update,version \
	-n "$0" -- "$@"`
std_cmd_err_handler $?

eval set -- "$GETOPTTEMP"
std_cmd_err_handler $?


while true
do
	case "$1" in
	-h|--help)
		echo "Usage is $0 [OPTIONS]"
		echo "	[OPTIONS] are:-"
		echo "	'-h or --help' Displays usage information."
		echo "	'-i or --install' Install the built kernel."
		echo "	'-n or --new' Build new kernel from scratch."
		echo "	'-o or --object-dir object-directory' Parallel build " \
					"base directory for"
		echo "		 object files."
		echo "		 Can be persisted with -p."
		echo "	'-p or --persist' Saves command line options for " \
					"future use."
		echo "	'-s or --source-dir source-directory' Base directory " \
					"for source."
		echo "		 Can be persisted with -p."
		echo "	'-u or --update' Update the built kernel."
		echo "	'-V or --version' Displays version information."
		shift
		script_exit_code=0
		script_exit
		;;
	-i|--install)
		install=TRUE
		shift
		;;
	-n|--new)
		new=TRUE
		shift
		;;
	-o|--object-dir)
		objectdir=$2
		shift 2
		;;
	-p|--persist)
		persist=TRUE
		shift
		;;
	-s|--source-dir)
		sourcedir=$2
		shift 2
		;;
	-u|--update)
		update=TRUE
		shift
		;;
	-V|--version)
		echo "$0 Script version "$version
		echo "$0 Package version "$packageversion
		shift
		script_exit_code=0
		script_exit
		;;
	--)	shift
		break
		;;
	*)	script_exit_code=1
		output "Internal error." 1
		script_exit
		;;
	esac
done

# Script must have one more argument, the directory above base level.
if [ $# = 0 ]
then
	script_exit_code=64
	output "Directory above base must be specified." 1
	script_exit
fi

# This is the directory above source and build directories.
abovebasedir=$1
shift

# Script does not accept other arguments.
if [ $# -gt 0 ]
then
	script_exit_code=64
	output "Script does not accept further arguments: $1" 1
	script_exit
fi

# If only persist flag set then nothing to do, exit.
if [ $# = 1 -a "$1" = "-p" ]
then
	script_exit_code=0
	script_exit
fi

# n and u flags cannot both be set.
if [ $new = TRUE -a $update = TRUE ]
then
	script_exit_code=64
	output "-n and -u cannot both be set." 1
	script_exit
fi

# Check source directory exists and is readable.
if [ ! -d "$sourcedir" ]
then
	script_exit_code=66
	output "Source directory not valid." 1
	script_exit
fi

if [ ! -r "$sourcedir" ]
then
	script_exit_code=77
	output "Source directory not accessible." 1
	script_exit
fi

# If persist is TRUE, save parameters.
if [ $persist = TRUE ]
then
	rm -f ~/$conffile
	write_file
fi


# Now perform the requests
currentdir=$(pwd)
cd $sourcedir/source/$abovebasedir
std_cmd_err_handler $?

if [ $new = TRUE ]
then
	output "Performing make distclean..." 0
	make O=$objectdir/build/$abovebasedir distclean
	status=$?
	output "make distclean completed with status "$status $status
	std_cmd_err_handler $status

	output "Copy in standard Ubuntu default .config file..." 0
	cp -v $sourcedir/ubuntu-amd64-config.flavour.generic \
		$objectdir/build/$abovebasedir/.config
	status=$?
	output "Copy completed with status "$status $status
	std_cmd_err_handler $status

	output "Performing make menuconfig..." 0
	make O=$objectdir/build/$abovebasedir menuconfig
	status=$?
	output "make menuconfig completed with status "$status $status
	std_cmd_err_handler $status

	output "Prepare lsmod input..." 0
	lsmod | grep -ve 'vbox' -e '8250_fintek' > $sourcedir/mylsmod.txt
	status=$?
	output "lsmod output capture completed with status "$status $status
	std_cmd_err_handler $status

	output "Performing make localmodconfig..." 0
	make O=$objectdir/build/$abovebasedir LSMOD=$sourcedir/mylsmod.txt \
		localmodconfig
	status=$?
	output "make localmodconfig completed with status "$status $status
	std_cmd_err_handler $status
fi

if [ $new = TRUE -o $update = TRUE ]
then
	output "Performing make -j4..." 0
	make O=$objectdir/build/$abovebasedir -j4
	status=$?
	output "make -j4 completed with status "$status $status
	std_cmd_err_handler $status
fi

if [ $install = TRUE ]
then
	output "Performing kernel install..." 0
	make O=$objectdir/build/$abovebasedir modules_install install
	status=$?
	output "Kernel install completed with status "$status $status
	std_cmd_err_handler $status
fi

cd $currentdir


# And exit
output "Script complete with exit code: "$script_exit_code $script_exit_code
script_exit
