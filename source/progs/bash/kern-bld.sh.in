#! /usr/bin/env bash
#########################################################################
#									#
#	kern-bld.sh is automatically generated,				#
#		please do not modify!					#
#									#
#########################################################################

#########################################################################
#									#
# Script ID: kern-bld.sh						#
# Author: Copyright (C) 2016-2017  Mark Grant				#
#									#
# Released under the GPLv3 only.					#
# SPDX-License-Identifier: GPL-3.0					#
#									#
# Purpose:								#
# Builds the specified kernel in the specified manner.			#
#                                                     	         	#
# Syntax:      kern-bld.sh [OPTIONS]					#
#			[OPTIONS] are:-					#
#	-c or --config-file 'config-filename' Full path to the kernel	#
#		config file to be copied in. Only valid with -n option.	#
#	-h or --help Displays usage information.			#
#	-i or --install Install the built kernel.			#
#	-n or --new Build new kernel from scratch.			#
#	-o or --object-dir 'object-directory' Parallel build base 	#
#		directory for object files.				#
#	-p or --persist Saves command line options for future use.	#
#	-s or --source-dir 'source-directory' Base directory for source.#
#	-u or --update Update the built kernel.				#
#	-V or --version Displays version information.			#
#									#
# Exit Codes:	0 & 64 - 113 as per C/C++ standard			#
#		0 - success						#
#		64 - Invalid arguments					#
#		66 - File access error					#
#		67 - trap received					#
#		77 - Permissions error					#
#									#
#########################################################################

#########################################################################
#									#
# Changelog								#
#									#
# Date		Author	Version	Description				#
#									#
# 06/07/2016	MG	1.0.1	Created.				#
# 08/07/2016	MG	1.0.2	Change command line parameters from	#
#				objectdir & sourcedir to object-dir &	#
#				source-dir.				#
#				Remove hard-coded source and build	#
#				directories from path. Now just uses	#
#				object-dir & source-dir as entered.	#
#				Due to above change the lsmod input file#
#				is now created in the actual source	#
#				directory, so remove after use.		#
#				Add command line argument option for	#
#				specifying the kernel config file to	#
#				copy in.				#
#				Ensure cd back to original directory.	#
# 09/07/2016	MG	1.0.3	Create and remove temporary lsmod file	#
#				in the build directory instead of the	#
#				source directory.			#
# 12/07/2016	MG	1.0.4	Kernel install needs root privileges so	#
#				using sudo eliminates requirement to do	#
#				so from shell prompt.			#
# 23/02/2017	MG	1.0.5	Add make silentoldconfig and make	#
#				prepare to both new and update to check	#
#				for new config options.			#
# 29/06/2017	MG	1.0.6	Remove exclusions from lsmod output as	#
#				it causes a VirtualBox guest screen	#
#				size issue. Probably a change due to	#
#				Ubuntu 17.04.				#
# 01/07/2017	MG	1.0.7	Enforce 80 column rule.			#
# 28/08/2017	MG	1.0.8	Add config file param concurrency and	#
#				command line arguments -j --jobs to be	#
#				fed to the build as number of jobs.	#
# 08/12/2017	MG	1.0.9	Add SPDX license tags to source files.	#
#									#
#########################################################################


##################
# Init variables #
##################
script_exit_code=0
version="1.0.9"				# set version variable
outputprefix="kern-bld.sh: "
packageversion=@pkgversion@		# Version of the complete package

concurrency=""
conffile=".kern-bld.conf"		# Conf file for this script
install=FALSE
kernconfigfile=""			# Full path to Kernel config file
new=FALSE
objectdir=""
persist=FALSE
sourcedir=""
update=FALSE

currentdir=$(pwd)


#############
# Functions #
#############

# Output $1 to stdout or stderr depending on $2
output()
{
	if [ $2 = 0 ]
	then
		echo "$outputprefix$1"
	else
		echo "$outputprefix$1" 1>&2
	fi
}

# Standard function to test command error ($1 is $?) and exit if non-zero
std_cmd_err_handler()
{
	if [ $1 != 0 ]
	then
		script_exit_code=$1
		script_exit
	fi
}

# Standard function to tidy up and return exit code
script_exit()
{
	cd $currentdir
	exit $script_exit_code
}

# Standard trap exit function
trap_exit()
{
script_exit_code=67
output "Script terminating due to trap received. Code: "$script_exit_code 1
script_exit
}

# Setup trap
trap trap_exit SIGHUP SIGINT SIGTERM

# Function to write config file.
write_file()
{
	echo "sourcedir=$sourcedir">>~/.kern-bld.conf
	echo "objectdir=$objectdir">>~/.kern-bld.conf
	echo "kernconfigfile=$kernconfigfile">>~/.kern-bld.conf
	echo "concurrency=$concurrency">>~/.kern-bld.conf
}


########
# Main #
########
# If config file exists, read it, else, create it.
if [ ! -f ~/$conffile ]
then
	write_file
else
	IFS="="
	exec 3<~/$conffile
	while read -u3 -ra input
	do
		case ${input[0]} in
		sourcedir)
			sourcedir=${input[1]}
			;;
		objectdir)
			objectdir=${input[1]}
			;;
		kernconfigfile)
			kernconfigfile=${input[1]}
			;;
		concurrency)
			concurrency=${input[1]}
			;;
		esac
	done
	exec 3<&-
fi

# Process command line arguments with GNU getopt.
tmp="getopt -o c:hij:no:ps:uV "
tmp+="--long config-file:,help,install,jobs:,new,object-dir:,persist,source-dir:,"
tmp+="update,version "
tmp+="-n $0 -- $@"
GETOPTTEMP=`eval $tmp`
eval set -- "$GETOPTTEMP"
std_cmd_err_handler $?

while true
do
	case "$1" in
	-c|--config-file)
		kernconfigfile=$2
		shift 2
		;;
	-h|--help)
		echo "Usage is $0 [OPTIONS]"
		echo "	[OPTIONS] are:-"
		echo "	'-c or --config-file config-filename' Full path to " \
					"the kernel config "
		echo "		 file to be copied in. Only valid with -n " \
					"--new option."
		echo "		 Can be persisted with -p."
		echo "	'-h or --help' Displays usage information."
		echo "	'-i or --install' Install the built kernel."
		echo "	'-j or --jobs' Number of concurrent processes to use."
		echo "		 Can be persisted with -p."
		echo "	'-n or --new' Build new kernel from scratch."
		echo "	'-o or --object-dir object-directory' Parallel build " \
					"base directory for"
		echo "		 object files."
		echo "		 Can be persisted with -p."
		echo "	'-p or --persist' Saves command line options for " \
					"future use."
		echo "	'-s or --source-dir source-directory' Base directory " \
					"for source."
		echo "		 Can be persisted with -p."
		echo "	'-u or --update' Update the built kernel."
		echo "	'-V or --version' Displays version information."
		shift
		script_exit_code=0
		script_exit
		;;
	-i|--install)
		install=TRUE
		shift
		;;
	-j|--jobs)
		concurrency=$2
		shift 2
		;;
	-n|--new)
		new=TRUE
		shift
		;;
	-o|--object-dir)
		objectdir=$2
		shift 2
		;;
	-p|--persist)
		persist=TRUE
		shift
		;;
	-s|--source-dir)output "Internal error." 1
		sourcedir=$2
		shift 2
		;;
	-u|--update)
		update=TRUE
		shift
		;;
	-V|--version)
		echo "$0 Script version "$version
		echo "$0 Package version "$packageversion
		shift
		script_exit_code=0
		script_exit
		;;
	--)	shift
		break
		;;
	*)	script_exit_code=1
		output "Internal error." 1
		script_exit
		;;
	esac
done

# Script must have one more argument, the directory above base level.
if [ $# = 0 ]
then
	script_exit_code=64
	output "Directory above base must be specified." 1
	script_exit
fi

# This is the directory above source and build directories.
abovebasedir=$1
shift

# Script does not accept other arguments.
if [ $# -gt 0 ]
then
	script_exit_code=64
	output "Script does not accept further arguments: $1" 1
	script_exit
fi

# If only persist flag set then nothing to do, exit.
if [ $# = 1 -a "$1" = "-p" ]
then
	script_exit_code=0
	script_exit
fi

# n and u flags cannot both be set.
if [ $new = TRUE -a $update = TRUE ]
then
	script_exit_code=64
	output "-n and -u cannot both be set." 1
	script_exit
fi

# Check source directory exists and is readable.
if [ ! -d "$sourcedir/$abovebasedir" ]
then
	script_exit_code=66
	output "Source directory not valid - $sourcedir/$abovebasedir" 1
	script_exit
fi

if [ ! -r "$sourcedir/$abovebasedir" ]
then
	script_exit_code=77
	output "Source directory not accessible - $sourcedir/$abovebasedir" 1
	script_exit
fi

# Check kernel config file exists and is readable.
if [ ! -f "$kernconfigfile" ]
then
	script_exit_code=66
	output "Kernel config file not valid." 1
	script_exit
fi

if [ ! -r "$kernconfigfile" ]
then
	script_exit_code=77
	output "Kernel config file not accessible." 1
	script_exit
fi

# If persist is TRUE, save parameters.
if [ $persist = TRUE ]
then
	rm -f ~/$conffile
	write_file
fi


# Now perform the requests
cd $sourcedir/$abovebasedir
std_cmd_err_handler $?

if [ $new = TRUE ]
then
	# Clean
	output "Performing make distclean..." 0
	make O=$objectdir/$abovebasedir distclean
	status=$?
	output "make distclean completed with status "$status $status
	std_cmd_err_handler $status

	# Copy config file
	output "Copy in kernel .config file..." 0
	cp -v $kernconfigfile $objectdir/$abovebasedir/.config
	status=$?
	output "Copy completed with status "$status $status
	std_cmd_err_handler $status

	# LSMOD
	output "Prepare lsmod input..." 0
	lsmod > $objectdir/mylsmod.txt
	status=$?
	output "lsmod output capture completed with status "$status $status
	std_cmd_err_handler $status
	output "Performing make localmodconfig..." 0
	make O=$objectdir/$abovebasedir LSMOD=$objectdir/mylsmod.txt \
		localmodconfig
	output "make localmodconfig completed with status "$status $status
	std_cmd_err_handler $status
	output "Remove lsmod input file..." 0
	rm -v $objectdir/mylsmod.txt
	status=$?
	output "lsmod input file removal completed with status "$status $status
	std_cmd_err_handler $status
fi


if [ $new = TRUE -o $update = TRUE ]
then
	# silentoldconfig
	output "Performing make silentoldconfig..." 0
	make O=$objectdir/$abovebasedir silentoldconfig
	status=$?
	output "make silentoldconfig completed with status "$status $status
	std_cmd_err_handler $status

	# menuconfig
	output "Performing make menuconfig..." 0
	make O=$objectdir/$abovebasedir menuconfig
	status=$?
	output "make menuconfig completed with status "$status $status
	std_cmd_err_handler $status

	# prepare
	output "Performing make prepare..." 0
	make O=$objectdir/$abovebasedir prepare
	status=$?
	output "make prepare completed with status "$status $status
	std_cmd_err_handler $status

	# Actual make
	output "Performing make -j$concurrency..." 0
	make O=$objectdir/$abovebasedir -j$concurrency
	status=$?
	output "make -j$concurrency completed with status "$status $status
	std_cmd_err_handler $status
fi


if [ $install = TRUE ]
then
	########################
	# Whilst the following code snippet "works", the target locations are
	# questionable, as is the link from /lib/nmodules.
	#
	# output "Performing kernel header install..." 0
	# sudo make headers_install \
	#		INSTALL_HDR_PATH=/usr/src/linux-headers-4.10.0
	# status=$?
	# std_cmd_err_handler $status
	# sudo mkdir -p /lib/modules/4.10.0
	# status=$?
	# std_cmd_err_handler $status
	# sudo ln -s /usr/src/linux-headers-4.10.0 /lib/modules/4.10.0/build
	# status=$?
	# output "Kernel header install completed with status "$status $status
	# std_cmd_err_handler $status
	########################


	output "Performing kernel install..." 0
	sudo make O=$objectdir/$abovebasedir modules_install install
	status=$?
	output "Kernel install completed with status "$status $status
	std_cmd_err_handler $status
fi


# And exit
output "Script complete with exit code: "$script_exit_code $script_exit_code
script_exit
